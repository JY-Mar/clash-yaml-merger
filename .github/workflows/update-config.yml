name: Update Clash Config

on:
  # 定时触发 - 每天的 0 点、8 点、16 点 各执行一次任务
  schedule:
    - cron: "0 0,8,16 * * *"

  # 手动触发
  workflow_dispatch:
    inputs:
      force_update:
        description: "强制更新配置"
        required: false
        default: false
        type: boolean

  # 当脚本文件更新时触发
  push:
    paths:
      - "scripts/**"
      - ".github/workflows/update-config.yml"
      - "config/**"

# 设置权限
permissions:
  contents: read
  pages: write
  id-token: write

# 确保只有一个部署任务同时运行
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  generate-config:
    runs-on: ubuntu-latest
    environment: github-pages

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Set up locale and encoding
        run: |
          sudo apt-get update
          sudo apt-get install -y locales language-pack-zh-hans
          sudo locale-gen zh_CN.UTF-8
          sudo update-locale LANG=zh_CN.UTF-8
          echo "LANG=zh_CN.UTF-8" >> $GITHUB_ENV
          echo "LC_ALL=zh_CN.UTF-8" >> $GITHUB_ENV
          echo "PYTHONIOENCODING=utf-8" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyYAML requests

      - name: Create output directory
        run: |
          mkdir -p docs

      - name: "Generate merged config"
        env:
          GITHUB_TOKEN: ${{ secrets.CLASH_GITHUB_TOKEN }}
          REPO_OWNER: ${{ secrets.CLASH_REPO_OWNER }}
          REPO_NAME: ${{ secrets.CLASH_REPO_NAME }}
          AUTH_TOKEN: ${{ secrets.CLASH_AUTH_TOKEN }}
          REMOTE_YAMLS: ${{ vars.CLASH_ENV_REMOTE_YAMLS }}
          FCONFS_DIRECTORIES: ${{ vars.CLASH_ENV_FCONFS_DIRECTORIES }}
          OUTPUT_DIR: docs
          PYTHONIOENCODING: utf-8
          PYTHONLEGACYWINDOWSFSENCODING: utf-8
          PYTHONUTF8: 1
          LC_ALL: zh_CN.UTF-8
          LANG: zh_CN.UTF-8
        run: |
          export PYTHONIOENCODING=utf-8
          export PYTHONUTF8=1
          python -c "import sys; print('Python encoding:', sys.stdout.encoding)"

          PY_FILE="scripts/merge_clash_config.py"

          python "$PY_FILE"

          # 验证生成的文件编码
          echo "=== ↓↓↓ 检查生成的文件 ↓↓↓ ==="

          # 先按 ; 分割
          IFS=';' read -ra groups <<< "$FCONFS_DIRECTORIES"
          NEW_PARAMS=()
          for group in "${groups[@]}"; do
            # 每个 group 再按 | 分割
            IFS='|' read -ra parts <<< "$group"
            # 取第一个元素（即 | 前的部分）
            NEW_PARAMS+=("${parts[0]}")
          done

          len=${#NEW_PARAMS[@]}
          ls -la docs/
          for ((i=0; i<len; i++)); do
            temp=${NEW_PARAMS[$i]}
            CONFIG_FILE="docs/clash-${temp}-${AUTH_TOKEN}.yaml"
            if [ -f "$CONFIG_FILE" ]; then
              file "$CONFIG_FILE"
              head -3 "$CONFIG_FILE"
              echo "配置文件生成成功: $CONFIG_FILE"
            else
              echo "错误: 配置文件 $CONFIG_FILE 未生成"
              exit 1
            fi
            echo "=== 检查进度 $((i+1)) / $len ==="
          done
          echo "=== ↑↑↑ 文件生成检查完毕 ↑↑↑ ==="

      - name: Generate index page with authentication
        env:
          AUTH_TOKEN: ${{ secrets.CLASH_AUTH_TOKEN }}
        run: |
          # 生成带有实际token的HTML页面
          cat > docs/index.html << 'HTMLEOF'
          <!DOCTYPE html>
          <html lang="zh-CN">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Clash 配置服务</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      max-width: 800px;
                      margin: 0 auto;
                      padding: 20px;
                      background-color: #f5f5f5;
                  }
                  .container {
                      background: white;
                      padding: 30px;
                      border-radius: 10px;
                      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                  }
                  .header {
                      text-align: center;
                      margin-bottom: 30px;
                  }
                  .config-info {
                      background: #f8f9fa;
                      padding: 20px;
                      border-radius: 8px;
                      margin: 20px 0;
                  }
                  .config-info + .success {
                      margin-top: 0px !important;
                      border-top-left-radius: 0px !important;
                      border-top-right-radius: 0px !important;
                  }
                  :has(.config-info + .success) .config-info {
                      margin-bottom: 0px !important;
                      border-bottom-left-radius: 0px !important;
                      border-bottom-right-radius: 0px !important;
                  }
                  .url-box {
                      background: #e9ecef;
                      padding: 15px;
                      border-radius: 5px;
                      font-family: monospace;
                      word-break: break-all;
                      margin: 10px 0;
                  }
                  .warning {
                      color: #dc3545;
                      background: #f8d7da;
                      padding: 15px;
                      border-radius: 5px;
                      margin: 20px 0;
                  }
                  .success {
                      color: #155724;
                      background: #d4edda;
                      padding: 15px;
                      border-radius: 5px;
                      margin: 20px 0;
                  }
                  .btn {
                      display: inline-block;
                      padding: 10px 20px;
                      background: #007bff;
                      color: white;
                      text-decoration: none;
                      border-radius: 5px;
                      margin: 5px;
                  }
                  .btn:hover {
                      background: #0056b3;
                  }
              </style>
          </head>
          <body>
              <script>
                window.ENV = {
                  FCONFS_DIRECTORIES: "${{ vars.CLASH_ENV_FCONFS_DIRECTORIES }}"
                };
              </script>

              <div class="container">
                  <div class="header">
                      <h1>🚀 Clash 配置整合服务</h1>
                      <p>自动整合多个订阅源的 Clash 配置文件</p>
                  </div>

                  <div class="warning">
                      <h3>⚠️ 重要提醒</h3>
                      <ul>
                          <li>此服务仅供个人使用，请勿分享配置链接</li>
                          <li>配置文件每天0 点、8 点、16 点各更新一次</li>
                          <li>访问配置需要正确的认证参数</li>
                      </ul>
                  </div>
              </div>
              
              <script>
                  const container = document.querySelector('.container');
                  let updateTime_DOM = document.querySelector('.config-info.updateTime');
                  if (!updateTime_DOM) {
                    updateTime_DOM = document.createElement('div');
                    updateTime_DOM.className = 'config-info updateTime';
                  }
                  if (container && updateTime_DOM) {
                      container.appendChild(updateTime_DOM);
                  }
                  const class_names = (window.ENV.FCONFS_DIRECTORIES || '').split(';').map((v) => (v || '').split('|')?.[0]).filter((v) => v !== undefined && v !== null && v !== '').map((v) => ({ label: v }));
                  class_names.forEach((class_name) => {
                      const dom = document.querySelector('.config-info.' + class_name.label);
                      if (dom) {
                          return;
                      }
                      // 创建配置统计区域
                      const configInfo = document.createElement('div');
                      configInfo.className = "config-info " + class_name.label;

                      const title1 = document.createElement("h3");
                      title1.textContent = "📊 配置统计 " + class_name.label + (class_name.remark ? "(" + class_name.remark + ")" : "");

                      const stats = document.createElement("div");
                      stats.id = "stats" + "-" + class_name.label;
                      stats.textContent = "加载中...";

                      configInfo.appendChild(title1);
                      configInfo.appendChild(stats);

                      // 创建使用方法区域
                      const successBox = document.createElement("div");
                      successBox.className = "success";

                      const title2 = document.createElement("h3");
                      title2.textContent = "📋 使用方法";

                      const desc = document.createElement("p");
                      desc.textContent = "在 Clash 客户端中添加以下订阅链接：";

                      const urlBox = document.createElement("div");
                      urlBox.className = "url-box";
                      urlBox.id = "config-url";
                      urlBox.textContent = "https://jy-mar.github.io/clash-yaml-merger/clash-" + class_name.label + "-{your-token}.yaml";

                      const tip = document.createElement("p");
                      const small = document.createElement("small");
                      small.textContent = "请将 {your-token} 替换为您的实际token";
                      tip.appendChild(small);

                      // 添加所有元素到 successBox
                      successBox.appendChild(title2);
                      successBox.appendChild(desc);
                      successBox.appendChild(urlBox);
                      successBox.appendChild(tip);

                      // 添加到页面
                      if (container) {
                          container.appendChild(configInfo);
                          container.appendChild(successBox);
                      }
                  });
                  // 加载统计信息
                  function fetchStats(filename) {
                    fetch('stats' + filename + '.json')
                      .then(response => response.json())
                      .then(data => {
                          const stats_DOM = document.getElementById('stats' + filename);
                          let dateStr = ''
                          const generateDate = new Date(data.generated_at)
                          if (typeof generateDate === 'object' && generateDate instanceof Date) {
                              const yyyy = generateDate.getFullYear()
                              let MM = generateDate.getMonth() + 1
                              MM = MM < 10 ? '0' + MM : MM
                              let dd = generateDate.getDate()
                              dd = dd < 10 ? '0' + dd : dd
                              let HH = generateDate.getHours()
                              HH = HH < 10 ? '0' + HH : HH
                              let mm = generateDate.getMinutes()
                              mm = mm < 10 ? '0' + mm : mm
                              let ss = generateDate.getSeconds()
                              ss = ss < 10 ? '0' + ss : ss
                              dateStr = `${yyyy}-${MM}-${dd} ${HH}:${mm}:${ss}`
                          } else {
                              dateStr = String(data.generated_at)
                          }
                          const label_style = 'width: 120px; display: inline-block; text-align: right;'
                          const _proxy_providers__proxies__count = data.proxy_providers__proxies__count || {}
                          const _proxy_providers_proxies = 
                          
                          stats_DOM.innerHTML = `
                              <p><strong style="${label_style}">代理集数量：</strong> ${data.proxy_providers_count}</p>
                              <p><strong style="${label_style}">代理节点总数：</strong> ${data.total_proxies_count}</p>
                              <p><strong style="${label_style}"></strong> > 独立节点数量 ${data.indep_proxies_count}</p>
                              <p>${Object.entries(_proxy_providers__proxies__count).map(([k, v]) => '<strong style="' + label_style + '"></strong> > 代理集 [' + k + ']：' + v).join('<br />')}</p>
                              <p><strong style="${label_style}">策略组数量：</strong> ${data.proxy_groups_count}</p>
                              <p><strong style="${label_style}">规则集数量：</strong> ${data.rule_providers_count}</p>
                              <p><strong style="${label_style}">规则总数：</strong> ${data.total_rules_count}</p>
                              <p><strong style="${label_style}"></strong> > 独立规则数量 ${data.indep_rules_count }</p>
                              <p><strong style="${label_style}"></strong> > 规则集数量 ${data.rules__rule_set__count }</p>
                          `;
                          if (updateTime_DOM) {
                              updateTime_DOM.innerHTML = `
                                  <p><strong>最后更新：</strong> ${dateStr}</p>
                              `;
                          }
                      })
                      .catch((error) => {
                          console.error('Error:', error);
                          document.getElementById('stats' + filename).innerHTML = '<p style="color: red;">加载统计信息失败</p>';
                      });
                  }
                  const intervals = Object.fromEntries(class_names.map((class_name) => [class_name.label, null]));
                  
                  window.onload = function () {
                      class_names.forEach((class_name) => {
                          if (intervals[class_name.label] !== undefined && intervals[class_name.label] !== null) {
                              clearInterval(intervals[class_name.label]);
                              intervals[class_name.label] = undefined;
                          };
                          intervals[class_name.label] = setInterval(() => {
                              if (document.getElementById('stats' + '-' + class_name.label)) {
                                  fetchStats('-' + class_name.label)
                                  clearInterval(intervals[class_name.label]);
                                  intervals[class_name.label] = null;
                              }
                          }, 70);
                      })
                  };
              </script>
          </body>
          </html>
          HTMLEOF

      - name: Create authentication wrapper
        env:
          AUTH_TOKEN: ${{ secrets.CLASH_AUTH_TOKEN }}
        run: |
          # 创建一个简单的认证包装器
          cat > docs/clash.yaml.php << 'EOF'
          <?php
          // 简单的认证检查
          $required_token = getenv('AUTH_TOKEN') ?: 'your-auth-token';
          $provided_token = $_GET['token'] ?? '';

          if ($provided_token !== $required_token) {
              http_response_code(404);
              echo "Not Found";
              exit;
          }

          // 返回配置文件
          header('Content-Type: application/x-yaml');
          header('Content-Disposition: attachment; filename="clash.yaml"');
          readfile('clash.yaml');
          ?>
          EOF

          # 由于GitHub Pages不支持PHP，我们创建一个JavaScript版本
          cat > docs/get-config.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Clash Config</title>
          </head>
          <body>
              <script>
                  const urlParams = new URLSearchParams(window.location.search);
                  const token = urlParams.get('token');
                  
                  if (token) {
                      // 这里应该是您的认证token
                      const validToken = '${AUTH_TOKEN}';
                      if (token === validToken) {
                          // 重定向到实际的配置文件
                          window.location.href = 'clash-${AUTH_TOKEN}.yaml';
                      } else {
                          // 返回404
                          document.body.innerHTML = '<h1>404 Not Found</h1>';
                          document.title = '404 Not Found';
                      }
                  } else {
                      // 返回404
                      document.body.innerHTML = '<h1>404 Not Found</h1>';
                      document.title = '404 Not Found';
                  }
              </script>
          </body>
          </html>
          EOF

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: generate-config

    steps:
      - name: 🧹 Clean up old Deployment Records
        uses: strumwolf/delete-deployment-environment@v3
        with:
          token: ${{ secrets.CLASH_GITHUB_TOKEN }}
          environment: github-pages
          onlyRemoveDeployments: true

      - name: ⬆️ Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
